#####################################################################
#       CUSTOM MACROS INCLUDING PRINT START END PAUSE RESUME
#####################################################################

[gcode_macro PRINT_START_UPDATED]         
gcode:
    {action_respond_info("Running PRINT START UPDATED...")}

    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    {% set fl_size = params.SIZE|default("0_0_0_0")|string %}
    #SAVE_VARIABLE VARIABLE=was_interrupted VALUE=True
    HEATERBED_SELECT SIZE={fl_size} TEMP={bedtemp} CONT=1                                                                   ; Start heating the bed
    SET_EXTRUDER_CONT TEMP=150                                                                                              ; Start heating the extruder
    CG28                                                                                                                    ; G28 Home printer
    G21                                                                                                                     ; set units to mm
    G90                                                                                                                     ; use absolute coordinates
    M83                                                                                                                     ; relative extruder positioning
    G1 Z4.0 F3000                                                                                                           ; Move Z Axis up
    G92 E0.0                                                                                                                ; reset extruder distance position
    HEATERBED_SELECT SIZE={fl_size} TEMP={bedtemp} CONT=0 SOAK=10                                                           ; Wait for bed temp only if they are not already at temp. Soak for 10 min if they are not at temp.
    BED_MESH_CLEAR                                                                                                          ; Clear Bed Mesh
    ADAPTIVE_BED_MESH SIZE={fl_size}                                                                                        ; Create a bed mesh that is whithin the bounds of the print
    # BED_MESH_CALIBRATE                                                                                                     ; Starts bed mesh
    G28 Z                                                                                                                   ; Home z after creating a bed mesh
    SET_EXTRUDER_WAIT TEMP={hotendtemp}                                                                                     ; wait for hotend temp
    HOTENDLED_ON
    PURGE_LINE                                                                                                              ; Start the purge line

[gcode_macro PRINT_START]         
gcode:
    {action_respond_info("Running PRINT START DEFAULT...")}

[gcode_macro PRINT_END_UPDATED]
gcode:
    {action_respond_info("Running PRINT END UPDATED...")}
    HOTENDLED_OFF
    G91 ;Relative positionning
    G1 E-2 F2700 ;Retract a bit
    G1 E-2 Z0.2 F1600 ;Retract and raise Z
    G1 X5 Y5 F3000 ;Wipe out
    G1 Z2 ;Raise Z more
    G90 ;Absolute positionning
    G1 X0 Y{printer.toolhead.axis_maximum.y} ;Present print
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed
    #M84 X Y E ;Disable all steppers but Z
    BED_MESH_CLEAR
    BED_MESH_PROFILE REMOVE=default
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    #SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    #RUN_SHELL_COMMAND CMD=clear_plr
    #clear_last_file

[gcode_macro PRINT_END]
gcode:
    {action_respond_info("Running PRINT END DEFAULT...")}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    #SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    HOTENDLED_OFF
    PRINT_END
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} 
    SDCARD_RESET_FILE
    M400 							                                                                                        ; wait for buffer to clear
    G92 E0 							                                                                                        ; zero the extruder
    G1 E-10.0 F1200 				                                                                                        ; retract filament
    G91 							                                                                                        ; relative positioning
    TURN_OFF_HEATERS
    M107 							                                                                                        ; turn off fan
    G1 Z2 F3000 					                                                                                        ; move nozzle up 2mm
    G90 							                                                                                        ; absolute positioning
    G0 X0 Y225 F3600 				                                                                                        ; park nozzle at rear
    BED_MESH_CLEAR
    BED_MESH_PROFILE REMOVE=default

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    M400 
    {% set z = params.Z|default(10)|int %}                                                   
    {% set e = params.E|default(2.5) %} 
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}                                              
    SAVE_GCODE_STATE NAME=PAUSE                                                                  
    M25                                                                              
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       
      G91
	    M83
	    G1 E-{e} F2100
      G1 Z{z} F900                                                                     
    {% else %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
    {% endif %}
    SAVE_GCODE_STATE NAME=PAUSEPARK
    G90                                                                                  
    G1 X0 Y220 F6000
	  G1 E{e} F2100	
    SET_IDLE_TIMEOUT TIMEOUT=86400                                                       

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(2.5)|int %}                                          
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    G91                                                                               
    M83
	  G1 E-{e} F900		
    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
      G1 Z{zhop * -1} F900
	    G1 E{e+0.5} F900	  
    {% else %}                      
      G1 Z{zhop * -1} F900                                                     
    {% endif %}
    M400
    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60 
    #M24

[gcode_macro PURGE_LINE]
description: Extrude a purge line Perams: NONE
gcode:
    {action_respond_info("Running Purge line...")}
    SAVE_GCODE_STATE NAME=PURGE_LINE
    G90                                                                                                                     ; absolute positioning
    M83                                                                                                                     ; relative extruder positioning
    G1 X1.1 Y20 Z0.28 F5000.0                                                                                               ; Move to start position
    G1 X1.1 Y80.0 Z0.28 F1500.0 E10                                                                                         ; Draw the first line
    G1 X1.4 Y80.0 Z0.28 F5000.0                                                                                             ; Move to side a little
    G1 X1.4 Y20 Z0.28 F1500.0 E20                                                                                           ; Draw the second line
    G1 Z2.0 F3000                                                                                                           ; Move Z Axis up
    G92 E0.0                                                                                                                ; reset extruder distance position

[gcode_macro M600]
description: Call for filament change. Perams: NONE
gcode:
    {action_respond_info("Filament change %(M600%) called.") }
    PAUSE

#####################################################################
#       CONDITIONAL HOMING
#####################################################################

[gcode_macro CG28]
description: Conditionally home XYZ if has not been homed before Perams: NONE
gcode:
    {action_respond_info("Conditional G28 has been called...")}
    {% if "xyz" not in printer.toolhead.homed_axes %}
        {action_respond_info("Doing a full G28 as the printer has not been homed before. CURRENT STATE: %s" % (printer.toolhead.homed_axes))}
        G28                                                                                                                 ; Home All Axes
    {% else %}
        {action_respond_info("Printer already homed. CURRENT STATE: %s" % (printer.toolhead.homed_axes))}
    {% endif %}

#####################################################################
#       AUTOMATIC HEATER BED SELECT
#####################################################################

[gcode_macro HEATERBED_SELECT]
description: Automatically select which bed heater to use on the Elegoo Neptune 4 Pro.
gcode:
    {% set bedtemp = params.TEMP|int %}
    {% set cont = params.CONT|default(0)|int %}
    {% set soaktime = params.SOAK|default(0)|int %}
    {% set inner_bed_x_size = params.INHEATERBEDX|default(120)|int %}
    {% set inner_bed_y_size = params.INHEATERBEDY|default(120)|int %}
    
    {% set bed_x_size = params.HEATERBEDX|default(230)|int %}
    {% set bed_y_size = params.HEATERBEDY|default(230)|int %}
    
    {% set bed_x_outer_min = ((bed_x_size / 2) - (inner_bed_x_size / 2)) %}
    {% set bed_y_outer_min = ((bed_y_size / 2) - (inner_bed_y_size / 2)) %}
    {% set bed_x_outer_max = ((bed_x_size / 2) + (inner_bed_x_size / 2)) %}
    {% set bed_y_outer_max = ((bed_y_size / 2) + (inner_bed_y_size / 2)) %}
    
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
        {action_respond_info("Got a SIZE parameter for the object being printed")}
        
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('float') %}
        # Figure out if the print resides outside of the inner bed
        
        {% if xMinSpec < bed_x_outer_min or yMinSpec < bed_y_outer_min or xMaxSpec > bed_x_outer_max or yMaxSpec > bed_y_outer_max %}
            {action_respond_info("Turning on both heater beds since print resides outside %sx%s" % (inner_bed_x_size, inner_bed_y_size)) }
            BOTH_HEATERBED TEMP={bedtemp} CONT={cont} SOAK={soaktime}
        {% else %}
            # Only heat inner bed
            {action_respond_info("Only turning on inner heated bed since the print resides inside %sx%s" % (inner_bed_x_size, inner_bed_y_size)) }
            OUTTER_HEATERBED TEMP=0                                                                                           ; Turn off OUTTER_HEATERBED
            INNER_HEATERBED TEMP={bedtemp} CONT={cont} SOAK={soaktime}
        {% endif %}
    
    {% else %}
        # If all else fails lets turn on both beds by default
        {action_respond_info("Print size was not passed! Turning on both heated beds!") }
        BOTH_HEATERBED TEMP={bedtemp} CONT={cont} SOAK={soaktime}
    {% endif %}

[gcode_macro INNER_HEATERBED]
gcode:
    {% set bedtemp = params.TEMP|int %}
    {% set cont = params.CONT|default(0)|int %}
    {% set soaktime = params.SOAK|default(0)|int %}
    
    {% set heater_bed = printer["heater_bed"] %}
    {% set heater_bed1 = printer["heater_generic heater_bed1"] %}
    
    {% if bedtemp == 0 %}
        {action_respond_info("INNER_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}
        {% if cont == 1 %}
            {action_respond_info("INNER_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }
        {% else %}
            {% if heater_bed.temperature|int >= (bedtemp - 1) %}
                {action_respond_info("Inner heated bed already at set temp. Continuing...") }
            {% elif soaktime == 0 %}
                {action_respond_info("Soak time of 0! Wating for inner bed to come up to temp then continuing...") }
                TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedtemp-4} MAXIMUM={bedtemp+10}
            {% else %}
                {action_respond_info("INNER_HEATERBED passed. Set temp to %.0f C. Waiting..." % (bedtemp)) }
                PARKBED                                                                                                 ; Move extruder to the center of the bed
                SET_EXTRUDER_CONT TEMP=150                                                                              ; Lower the temp of the extruder if we need to wait for the bed
                WAIT S={soaktime * 60}                                                                                  ; Since we need to wait for the bed to heat up. Lets soak the bed for x minutes
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro OUTTER_HEATERBED]
gcode:
    {% set bedtemp = params.TEMP|int %}
    {% set cont = params.CONT|default(0)|int %}
    {% set soaktime = params.SOAK|default(0)|int %}
    
    {% set heater_bed = printer["heater_bed"] %}
    {% set heater_bed1 = printer["heater_generic heater_bed1"] %}
    
    {% if bedtemp == 0 %}
        {action_respond_info("OUTTER_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }
        SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={bedtemp}
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={bedtemp}
        {% if cont == 1 %}
            {action_respond_info("OUTTER_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }
        {% else %}
            {% if heater_bed1.temperature|int >= (bedtemp - 1) %}
                {action_respond_info("Outer heated bed already at set temp. Continuing...") }
            {% elif soaktime == 0 %}
                {action_respond_info("Soak time of 0! Wating for outer bed to come up to temp then continuing...") }
                TEMPERATURE_WAIT SENSOR=heater_bed1 MINIMUM={bedtemp-4} MAXIMUM={bedtemp+10}
            {% else %}
                {action_respond_info("OUTTER_HEATERBED passed. Set temp to %.0f C. Waiting..." % (bedtemp)) }
                PARKBED                                                                                                 ; Move extruder to the center of the bed
                SET_EXTRUDER_CONT TEMP=150                                                                              ; Lower the temp of the extruder if we need to wait for the bed
                WAIT S={soaktime * 60}                                                                                  ; Since we need to wait for the bed to heat up. Lets soak the bed for x minutes
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro BOTH_HEATERBED]
gcode:
    {% set bedtemp = params.TEMP|int %}
    {% set cont = params.CONT|default(0)|int %}
    {% set soaktime = params.SOAK|default(0)|int %}
    
    {% set heater_bed = printer["heater_bed"] %}
    {% set heater_bed1 = printer["heater_generic heater_bed1"] %}
    
    {% if bedtemp == 0 %}
        {action_respond_info("BOTH_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}
        SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={bedtemp+5}
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}
        SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={bedtemp+5}
        {% if cont == 1 %}
            {action_respond_info("BOTH_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }
        {% else %}
            {% if heater_bed.temperature|int >= (bedtemp - 1) and heater_bed1.temperature|int >= (bedtemp - 1) %}
                {action_respond_info("Both heated beds already at set temp. Continuing...") }
            {% elif soaktime == 0 %}
                {action_respond_info("Soak time of 0! Wating for beds to come up to temp then continuing...") }
                TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedtemp-4} MAXIMUM={bedtemp+10}
            {% else %}
                {action_respond_info("BOTH_HEATERBED passed. Set temp to %.0f C. Waiting..." % (bedtemp)) }
                PARKBED                                                                                                 ; Move extruder to the center of the bed
                SET_EXTRUDER_CONT TEMP=150                                                                              ; Lower the temp of the extruder if we need to wait for the bed
                WAIT S={soaktime * 60}                                                                                  ; Since we need to wait for the bed to heat up. Lets soak the bed for x minutes
            {% endif %}
        {% endif %}
    {% endif %}


#####################################################################
#       SET TEMPERATURES
#####################################################################

[gcode_macro SET_EXTRUDER_WAIT]
description: Set extruder temperature and wait till its reached. PERAMS: TEMP
gcode:
    {% set hotendtemp = params.TEMP|int %}
    
    {action_respond_info("Setting EXTRUDER temp to %.0f C and WAITING..." % (hotendtemp))}
    M109 S{hotendtemp}

[gcode_macro SET_EXTRUDER_CONT]
description: Set extruder temperature and continue PERAMS: TEMP
gcode:
    {% set hotendtemp = params.TEMP|int %}
    
    {action_respond_info("Setting EXTRUDER temp to %.0f C and CONTINUING..." % (hotendtemp))}
    M104 S{hotendtemp}

#####################################################################
#       PARKING
#####################################################################

[gcode_macro PARKBED]
description: Park the extruder in the center of the bed Z at 20mm. Perams: NONE
gcode:
    {action_respond_info("Parking EXTRUDER in the center of the bed Z at 10mm...")}
    CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z10 F19500
    RESTORE_GCODE_STATE NAME=PARKBED

#####################################################################
#       MATERIAL PREHEAT
#####################################################################

[gcode_macro PREHEAT_PLA]
description: Preheat PLA
gcode:
    {% if printer['print_stats'].state == 'printing' %}
        {action_respond_info("PREHEAT: Printer is printing!!! Aborting!!!")}
    {% else %}
        {action_respond_info("PREHEAT: PLA...")}
        SET_EXTRUDER_CONT TEMP=0
        INNER_HEATERBED TEMP=60
        CG28
        PARKBED
        SET_IDLE_TIMEOUT TIMEOUT=10800                                                                                          ; set timeout to 3 hours
    {% endif %}

[gcode_macro PREHEAT_PETG]
description: Preheat PETG
gcode:
    {% if printer['print_stats'].state == 'printing' %}
        {action_respond_info("PREHEAT: Printer is printing!!! Aborting!!!")}
    {% else %}
        {action_respond_info("PREHEAT: PETG...")}
        SET_EXTRUDER_CONT TEMP=0
        INNER_HEATERBED TEMP=80
        CG28
        PARKBED
        SET_IDLE_TIMEOUT TIMEOUT=10800                                                                                          ; set timeout to 3 hours
    {% endif %}


#####################################################################
#       MISC
#####################################################################

[gcode_macro POWER_OFF_PRINTER]
description: Power off the printer but leave the host running
gcode:
  {action_respond_info("POWER_OFF_PRINTER: Powering off steppers and lights...")}
  M84
  TURN_OFF_HEATERS
  HOTENDLED_OFF
  TOPBARLED_OFF

[gcode_macro WAIT]
description: Wait a specified number of seconds. PERAMS: S
gcode:
    {% set seconds = params.S|default(0)|int %}
    
    {% if seconds == 0 %}
        {action_respond_info("No amount of time was specifed! Not Waiting!") }
    {% else %}
        {action_respond_info("Waiting %.0f seconds..." % (seconds)) }
        G4 P{seconds * 1000}
    {% endif %}

[gcode_macro DUMP_PARAMETERS]
description: Dumps all Klipper parameters to the console. This helps to find Klipper system variables for use in macros. PERAMS: NONE
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}