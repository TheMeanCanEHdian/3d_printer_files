#####################################################################
#       PRINT START END CANCEL PAUSE RESUME PURGE
#####################################################################

[gcode_macro PRINT_START]         
gcode:
    {action_respond_info("Running PRINT START...")}

    # Params
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.EXTRUDER|int %}
    {% set fl_size = params.SIZE|default("0_0_0_0")|string %}
    
    HEATERBED_SELECT SIZE={fl_size} TEMP={bedtemp} CONT=1                                                               # Start heating the bed
    SET_EXTRUDER_CONT TEMP=150                                                                                          # Start heating the extruder

    CG28                                                                                                                # Home printer if not yet homed
    G21                                                                                                                 # Set units to mm
    G90                                                                                                                 # Use absolute coordinates
    M83                                                                                                                 # Relative extruder positioning
    G1 Z4.0 F3000                                                                                                       # Move Z Axis up
    G92 E0.0                                                                                                            # Reset extruder distance position

    HEATERBED_SELECT SIZE={fl_size} TEMP={bedtemp} CONT=0 SOAK=10                                                       # Wait for bed temp only if they are not already at temp. Soak for 10 min if they are not at temp.
    
    BED_MESH_CLEAR                                                                                                      # Clear current bed mesh
    ADAPTIVE_BED_MESH SIZE={fl_size}                                                                                    # Create a bed mesh that is whithin the bounds of the print
    G28 Z                                                                                                               # Home z after creating a bed mesh
    
    SET_EXTRUDER_WAIT TEMP={hotendtemp}                                                                                 # Wait for hotend temp
    
    EXTRUDERLED_ON                                                                                                      # Turn on extruder LED
    PURGE_LINE                                                                                                          # Start purge line

[gcode_macro PRINT_END]
gcode:
    {action_respond_info("Running PRINT END...")}

    EXTRUDERLED_OFF                                                                                                     # Turn off extruder LED

    G91                                                                                                                 # Relative positioning
    G1 E-2 F2700                                                                                                        # Retract a bit
    G1 E-2 Z0.2 F1600                                                                                                   # Retract and raise Z
    G1 X5 Y5 F3000                                                                                                      # Wipe out
    G1 Z2                                                                                                               # Raise Z more
    G90                                                                                                                 # Absolute positioning
    G1 X0 Y{printer.toolhead.axis_maximum.y}                                                                            # Present print

    M106 S0                                                                                                             # Turn off print cooling fan
    TURN_OFF_HEATERS                                                                                                    # Turn off heater beds and hotend

    BED_MESH_CLEAR                                                                                                      # Clear current bed mesh
    BED_MESH_PROFILE REMOVE=default                                                                                     # Remove bed mesh from config

    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                         # Start idle timeout

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
    {action_respond_info("Running CANCEL PRINT...")}

    CANCEL_PRINT_BASE                                                                                                   # Cancel print
    PRINT_END                                                                                                           # End print

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {action_respond_info("Running PAUSE...")}

    # Params
    {% set z = params.Z|default(10)|int %}                                                                              # Amount to lift z
  
    {% if printer['pause_resume'].is_paused|int == 0 %}		
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                                         # Set zhop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}                               # Set hotend temp variable for reference in resume macro
        SAVE_GCODE_STATE NAME=PAUSE                                                                                     # Save current print position for resume

        BASE_PAUSE                                                                                                      # Pause print

        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}                                  # Check that zhop doesn't exceed z max
            G91                                                                                                         # Relative positioning
            G1 Z{z} F900                                                                                                # Raise z up by zhop amount
        {% else %}
            { action_respond_info("PAUSE: Pause zhop exceeds maximum Z height.") }                                      # If z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}

        G90                                                                                                             # Absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500                             # Park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                                                 # Save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                                                         # Turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                                                  # Set timeout to 12 hours
  {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {action_respond_info("Running RESUME...")}

    # Params
    {% set e = params.E|default(2)|int %}
  
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                     # Set timeout back to configured value

        {% if etemp > 0 %}
            SET_EXTRUDER_WAIT TEMP={etemp|int}                                                                          # Wait for hotend to heat back up
        {% endif %}

        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450                                                        # Go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                                                             # Relative positioning
        M83                                                                                                             # Relative extruder positioning
        
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                                                   # Prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                                                        # Lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}

        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450                                                            # Restore position
        BASE_RESUME                                                                                                     # Resume print
    {% endif %}

[gcode_macro PURGE_LINE]
description: Extrude a purge line | Params: NONE
gcode:
    {action_respond_info("Running Purge line...")}

    SAVE_GCODE_STATE NAME=PURGE_LINE
    G90                                                                                                                 # Absolute positioning
    M83                                                                                                                 # Relative extruder positioning
    G1 X1.1 Y20 Z0.28 F5000.0                                                                                           # Move to start position
    G1 X1.1 Y80.0 Z0.28 F1500.0 E10                                                                                     # Draw the first line
    G1 X1.4 Y80.0 Z0.28 F5000.0                                                                                         # Move to side a little
    G1 X1.4 Y20 Z0.28 F1500.0 E20                                                                                       # Draw the second line
    G1 Z2.0 F3000                                                                                                       # Move Z Axis up
    G92 E0.0                                                                                                            # Reset extruder distance position

#####################################################################
#       CONDITIONAL HOMING
#####################################################################

[gcode_macro CG28]
description: Conditionally home XYZ if has not been homed before | Params: NONE
gcode:
    {action_respond_info("Conditional G28 has been called...")}

    {% if "xyz" not in printer.toolhead.homed_axes %}                                                                   # Check if printer has been homed
        {action_respond_info("Doing a full G28 as the printer has not been homed before.")}
        G28                                                                                                             # Home all axes
    {% else %}
        {action_respond_info("Printer already homed.")}
    {% endif %}

#####################################################################
#       FILAMENT
#####################################################################
[gcode_macro UNLOAD_FILAMENT]
description: Unload filament from extruder | Params: None
gcode:
    {action_respond_info("Unloading filament...")}

    SAVE_GCODE_STATE NAME=UNLOADFILAMENT

    M83                                                                                                                 # Set extruder to relative
    G1 E10 F600                                                                                                         # Extrude a little to soften tip 
    G1 E-100 F900                                                                                                       # Retract filament completely

    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
description: Load filament intro extruder | Params: DISTANCE(80)
gcode:
    # Params
    {% set DISTANCE = params.DISTANCE|default(80)|float %}

    {action_respond_info("Loading filament...")}
    
    SAVE_GCODE_STATE NAME=LOADFILAMENT

    M83                                                                                                                 # Set extruder to relative
    G1 E{DISTANCE} F450                                                                                                 # Extrude distance
    G1 E-.75                                                                                                            # Retract a little

    RESTORE_GCODE_STATE NAME=LOADFILAMENT

[gcode_macro M600]
description: Call for filament change | Params: None
gcode:
    {action_respond_info("Filament change %(M600%) called.") }

    PAUSE                                                                                                               # Pause print

#####################################################################
#       AUTOMATIC HEATER BED SELECT
#####################################################################

[gcode_macro HEATERBED_SELECT]
description: Automatically select which bed heater to use on the Elegoo Neptune 4 Pro | Params: SIZE, TEMP, CONT(0), SOAK(0)
gcode:
    # Params
    {% set fl_size = params.SIZE|string %}
    {% set bedtemp = params.TEMP|int %}
    {% set cont = params.CONT|default(0)|int %}
    {% set soaktime = params.SOAK|default(0)|int %}

    # Other params
    {% set inner_bed_x_size = params.INHEATERBEDX|default(120)|int %}
    {% set inner_bed_y_size = params.INHEATERBEDY|default(120)|int %}
    {% set bed_x_size = params.HEATERBEDX|default(230)|int %}
    {% set bed_y_size = params.HEATERBEDY|default(230)|int %}
    
    {% set bed_x_outer_min = ((bed_x_size / 2) - (inner_bed_x_size / 2)) %}
    {% set bed_y_outer_min = ((bed_y_size / 2) - (inner_bed_y_size / 2)) %}
    {% set bed_x_outer_max = ((bed_x_size / 2) + (inner_bed_x_size / 2)) %}
    {% set bed_y_outer_max = ((bed_y_size / 2) + (inner_bed_y_size / 2)) %}
    
    {% if fl_size is defined and fl_size != "0_0_0_0" %}
        {action_respond_info("Got a SIZE parameter for the object being printed")}
        
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = fl_size.split('_')|map('trim')|map('float') %}

        # Figure out if the print resides outside of the inner bed
        {% if xMinSpec < bed_x_outer_min or yMinSpec < bed_y_outer_min or xMaxSpec > bed_x_outer_max or yMaxSpec > bed_y_outer_max %}
            {action_respond_info("Turning on both heater beds since print resides outside %sx%s" % (inner_bed_x_size, inner_bed_y_size)) }

            BOTH_HEATERBED TEMP={bedtemp} CONT={cont} SOAK={soaktime}                                                   # Turn on both heater beds
        {% else %}
            # Only heat inner bed
            {action_respond_info("Only turning on inner heated bed since the print resides inside %sx%s" % (inner_bed_x_size, inner_bed_y_size)) }

            OUTER_HEATERBED TEMP=0                                                                                      # Turn off outer heater bed
            INNER_HEATERBED TEMP={bedtemp} CONT={cont} SOAK={soaktime}                                                  # Turn on inner heater bed
        {% endif %}
    
    {% else %}
        # If all else fails lets turn on both beds by default
        {action_respond_info("Print size was not passed! Turning on both heater beds!") }

        BOTH_HEATERBED TEMP={bedtemp} CONT={cont} SOAK={soaktime}                                                       # Turn on both heater beds
    {% endif %}

[gcode_macro INNER_HEATERBED]
description: Set temperature of inner heater bed | Params: TEMP, CONT(0), SOAK(0)
gcode:
    # Params
    {% set bedtemp = params.TEMP|int %}
    {% set cont = params.CONT|default(0)|int %}
    {% set soaktime = params.SOAK|default(0)|int %}
    
    {% set heater_bed = printer["heater_bed"] %}
    {% set heater_bed1 = printer["heater_generic heater_bed1"] %}
    
    {% if bedtemp == 0 %}                                                                                               # Check if the inner bed is being set to 0
        {action_respond_info("INNER_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }

        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}                                                       # Set inner bed temp
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}                                                       # Set inner bed temp
        {% if cont == 1 %}                                                                                              # Check if should wait for bed to come up to temp
            {action_respond_info("INNER_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }
        {% else %}
            {% if heater_bed.temperature|int >= (bedtemp - 1) %}                                                        # If current bed temp is more than bedtemp-1 skip soak check
                {action_respond_info("Inner heated bed already at set temp. Continuing...") }
            {% elif soaktime == 0 %}                                                                                    # If soak time is 0, wait for the inner bed to come up to approx. temp
                {action_respond_info("Soak time of 0! Wating for inner bed to come up to temp then continuing...") }

                TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedtemp-4} MAXIMUM={bedtemp+10}                             # Wait for the inner bed to within -4 to +10 of desired temp
            {% else %}
                {action_respond_info("INNER_HEATERBED passed. Set temp to %.0f C. Waiting..." % (bedtemp)) }

                PARKBED                                                                                                 # Move extruder to the center of the bed for the soak
                SET_EXTRUDER_CONT TEMP=150                                                                              # Lower the temp of the extruder for the soak
                WAIT S={soaktime * 60}                                                                                  # Soak the bed
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro OUTER_HEATERBED]
description: Set temperature of outer heater bed | Params: TEMP, CONT(0), SOAK(0)
gcode:
    # Params
    {% set bedtemp = params.TEMP|int %}
    {% set cont = params.CONT|default(0)|int %}
    {% set soaktime = params.SOAK|default(0)|int %}
    
    {% set heater_bed = printer["heater_bed"] %}
    {% set heater_bed1 = printer["heater_generic heater_bed1"] %}
    
    {% if bedtemp == 0 %}                                                                                               # Check if the outer bed is being set to 0
        {action_respond_info("OUTER_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }

        SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={bedtemp}                                                      # Set outer bed temp
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={bedtemp}                                                      # Set outer bed temp
        {% if cont == 1 %}                                                                                              # Check if should wait for bed to come up to temp
            {action_respond_info("OUTER_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }
        {% else %}
            {% if heater_bed1.temperature|int >= (bedtemp - 1) %}                                                       # If current bed temp is more than bedtemp-1 skip soak check
                {action_respond_info("Outer heated bed already at set temp. Continuing...") }
            {% elif soaktime == 0 %}                                                                                    # If soak time is 0, wait for the outer bed to come up to approx. temp
                {action_respond_info("Soak time of 0! Wating for outer bed to come up to temp then continuing...") }

                TEMPERATURE_WAIT SENSOR="heater_generic heater_bed1" MINIMUM={bedtemp-4} MAXIMUM={bedtemp+10}           # Wait for the outer bed to be within -4 to +10 of desired temp
            {% else %}
                {action_respond_info("OUTER_HEATERBED passed. Set temp to %.0f C. Waiting..." % (bedtemp)) }

                PARKBED                                                                                                 # Move extruder to the center of the bed for the soak
                SET_EXTRUDER_CONT TEMP=150                                                                              # Lower the temp of the extruder for the soak
                WAIT S={soaktime * 60}                                                                                  # Soak the bed
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro BOTH_HEATERBED]
description: Set temperature of both heater beds | Params: TEMP, CONT(0), SOAK(0)
gcode:
    # Params
    {% set bedtemp = params.TEMP|int %}
    {% set cont = params.CONT|default(0)|int %}
    {% set soaktime = params.SOAK|default(0)|int %}
    
    {% set heater_bed = printer["heater_bed"] %}
    {% set heater_bed1 = printer["heater_generic heater_bed1"] %}
    
    {% if bedtemp == 0 %}                                                                                               # Check if the beds are being set to 0
        {action_respond_info("BOTH_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }

        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}                                                       # Set inner bed temp
        SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={bedtemp}                                                      # Set outer bed temp
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bedtemp}                                                       # Set inner bed temp
        SET_HEATER_TEMPERATURE HEATER=heater_bed1 TARGET={bedtemp}                                                      # Set outer bed temp
        {% if cont == 1 %}                                                                                              # Check if should wait for beds to come up to temp
            {action_respond_info("BOTH_HEATERBED passed. Set temp to %.0f C. Continuing..." % (bedtemp)) }
        {% else %}
            {% if heater_bed.temperature|int >= (bedtemp - 1) and heater_bed1.temperature|int >= (bedtemp - 1) %}       # If current bed temps are more than bedtemp-1 skip soak check
                {action_respond_info("Both heated beds already at set temp. Continuing...") }
            {% elif soaktime == 0 %}                                                                                    # If soak time is 0, wait for the beds to come up to approx. temps
                {action_respond_info("Soak time of 0! Wating for beds to come up to temp then continuing...") }

                TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedtemp-4} MAXIMUM={bedtemp+10}                             # Wait for the inner bed to be within -4 to +10 of desired temp
                TEMPERATURE_WAIT SENSOR="heater_generic heater_bed1" MINIMUM={bedtemp-4} MAXIMUM={bedtemp+10}           # Wait for the outer bed to be within -4 to +10 of desired temp
            {% else %}
                {action_respond_info("BOTH_HEATERBED passed. Set temp to %.0f C. Waiting..." % (bedtemp)) }

                PARKBED                                                                                                 # Move extruder to the center of the bed for the soak
                SET_EXTRUDER_CONT TEMP=150                                                                              # Lower the temp of the extruder for the soak
                WAIT S={soaktime * 60}                                                                                  # Soak the beds
            {% endif %}
        {% endif %}
    {% endif %}


#####################################################################
#       SET TEMPERATURES
#####################################################################

[gcode_macro SET_EXTRUDER_WAIT]
description: Set extruder temperature and wait till it's reached | Params: TEMP
gcode:
    # Params
    {% set hotendtemp = params.TEMP|int %}
    
    {action_respond_info("Setting EXTRUDER temp to %.0f C and WAITING..." % (hotendtemp))}

    M109 S{hotendtemp}                                                                                                  # Set and wait for hotend temp

[gcode_macro SET_EXTRUDER_CONT]
description: Set extruder temperature and continue | Params: TEMP
gcode:
    # Params
    {% set hotendtemp = params.TEMP|int %}
    
    {action_respond_info("Setting EXTRUDER temp to %.0f C and CONTINUING..." % (hotendtemp))}

    M104 S{hotendtemp}                                                                                                  # Set hotend temp

[gcode_macro M109]
rename_existing: M99109
description: Update "Wait for Hotend Temperature" to include acceptable buffer | Params: S
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}                                                     # Set hotend temp

    {% if s != 0 %}                                                                                                     # Check if hotend is being turned off
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-4} MAXIMUM={s+20}                                                   # Wait for the hotend to be within -4 and +20 of desired temp
    {% endif %}

#####################################################################
#       PARKING
#####################################################################

[gcode_macro PARKBED]
description: Park the extruder in the center of the bed Z at 10mm | Params: None
gcode:
    {action_respond_info("Parking EXTRUDER in the center of the bed Z at 10mm...")}

    CG28                                                                                                                # Make sure the printer has been homed
    
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                                                                                                 # Use absolute coordinates
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z10 F19500                             # Center the extruder 10mm above the bed
    RESTORE_GCODE_STATE NAME=PARKBED

#####################################################################
#       MATERIAL PREHEAT
#####################################################################

[gcode_macro PREHEAT_PLA]
description: Preheat PLA
gcode:
    {% if printer['print_stats'].state == 'printing' %}
        {action_respond_info("PREHEAT: Printer is printing!!! Aborting!!!")}
    {% else %}
        {action_respond_info("PREHEAT: PLA...")}

        SET_EXTRUDER_CONT TEMP=0                                                                                        # Set extruder temp to 0
        INNER_HEATERBED TEMP=60                                                                                         # Set inner heater bed to 60
        CG28                                                                                                            # Make sure the printer has been homed
        PARKBED                                                                                                         # Move the extruder to center of bed
        SET_IDLE_TIMEOUT TIMEOUT=10800                                                                                  # Set timeout to 3 hours
    {% endif %}

[gcode_macro PREHEAT_PETG]
description: Preheat PETG
gcode:
    {% if printer['print_stats'].state == 'printing' %}
        {action_respond_info("PREHEAT: Printer is printing!!! Aborting!!!")}
    {% else %}
        {action_respond_info("PREHEAT: PETG...")}

        SET_EXTRUDER_CONT TEMP=0                                                                                        # Set extruder temp to 0
        INNER_HEATERBED TEMP=80                                                                                         # Set inner heater bed to 80
        CG28                                                                                                            # Make sure the printer has been homed
        PARKBED                                                                                                         # Move the extruder to center of bed
        SET_IDLE_TIMEOUT TIMEOUT=10800                                                                                  # Set timeout to 3 hours
    {% endif %}


#####################################################################
#       MISC
#####################################################################

[gcode_macro POWER_OFF_PRINTER]
description: Power off the printer but leave the host running
gcode:
  {action_respond_info("POWER_OFF_PRINTER: Powering off steppers and lights...")}

  M84                                                                                                                   # Disable steppers
  TURN_OFF_HEATERS                                                                                                      # Turn off hotend and heater beds
  EXTRUDERLED_OFF                                                                                                       # Turn off extruder LED
  TOPBARLED_OFF                                                                                                         # Turn off top bar LED

[gcode_macro WAIT]
description: Wait a specified number of seconds | Params: S
gcode:
    # Params
    {% set seconds = params.S|default(0)|int %}
    
    {% if seconds == 0 %}
        {action_respond_info("No amount of time was specifed! Not Waiting!") }
    {% else %}
        {action_respond_info("Waiting %.0f seconds..." % (seconds)) }

        G4 P{seconds * 1000}                                                                                            # Wait for provided time
    {% endif %}

[gcode_macro DUMP_PARAMETERS]
description: Dumps all Klipper parameters to the console. This helps to find Klipper system variables for use in macros | Params: None
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}